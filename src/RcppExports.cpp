// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// normal_pdf
double normal_pdf(double x, double m, double s);
RcppExport SEXP _MVMR_CUE_normal_pdf(SEXP xSEXP, SEXP mSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(normal_pdf(x, m, s));
    return rcpp_result_gen;
END_RCPP
}
// MVMRCUEfun
List MVMRCUEfun(arma::mat& gammahM, arma::vec& Gammah, arma::mat& se1M, arma::vec& se2);
RcppExport SEXP _MVMR_CUE_MVMRCUEfun(SEXP gammahMSEXP, SEXP GammahSEXP, SEXP se1MSEXP, SEXP se2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type gammahM(gammahMSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gammah(GammahSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type se1M(se1MSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type se2(se2SEXP);
    rcpp_result_gen = Rcpp::wrap(MVMRCUEfun(gammahM, Gammah, se1M, se2));
    return rcpp_result_gen;
END_RCPP
}
// MVMRCUEoverlapfun
List MVMRCUEoverlapfun(arma::mat& gammahM, arma::vec& Gammah, arma::mat& se1M, arma::vec& se2, arma::mat& Re, arma::ivec& Eta);
RcppExport SEXP _MVMR_CUE_MVMRCUEoverlapfun(SEXP gammahMSEXP, SEXP GammahSEXP, SEXP se1MSEXP, SEXP se2SEXP, SEXP ReSEXP, SEXP EtaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type gammahM(gammahMSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gammah(GammahSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type se1M(se1MSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type se2(se2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type Eta(EtaSEXP);
    rcpp_result_gen = Rcpp::wrap(MVMRCUEoverlapfun(gammahM, Gammah, se1M, se2, Re, Eta));
    return rcpp_result_gen;
END_RCPP
}
// MVMRCUEIndepSample
Rcpp::List MVMRCUEIndepSample(arma::mat& gammahM, arma::vec& Gammah, arma::mat& se1M, arma::vec& se2, SEXP opts);
RcppExport SEXP _MVMR_CUE_MVMRCUEIndepSample(SEXP gammahMSEXP, SEXP GammahSEXP, SEXP se1MSEXP, SEXP se2SEXP, SEXP optsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type gammahM(gammahMSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gammah(GammahSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type se1M(se1MSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type se2(se2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type opts(optsSEXP);
    rcpp_result_gen = Rcpp::wrap(MVMRCUEIndepSample(gammahM, Gammah, se1M, se2, opts));
    return rcpp_result_gen;
END_RCPP
}
// MVMRCUE
Rcpp::List MVMRCUE(arma::mat& gammahM, arma::vec& Gammah, arma::mat& se1M, arma::vec& se2, arma::mat& Re, SEXP opts);
RcppExport SEXP _MVMR_CUE_MVMRCUE(SEXP gammahMSEXP, SEXP GammahSEXP, SEXP se1MSEXP, SEXP se2SEXP, SEXP ReSEXP, SEXP optsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type gammahM(gammahMSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gammah(GammahSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type se1M(se1MSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type se2(se2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< SEXP >::type opts(optsSEXP);
    rcpp_result_gen = Rcpp::wrap(MVMRCUE(gammahM, Gammah, se1M, se2, Re, opts));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _MVMR_CUE_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _MVMR_CUE_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _MVMR_CUE_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _MVMR_CUE_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MVMR_CUE_normal_pdf", (DL_FUNC) &_MVMR_CUE_normal_pdf, 3},
    {"_MVMR_CUE_MVMRCUEfun", (DL_FUNC) &_MVMR_CUE_MVMRCUEfun, 4},
    {"_MVMR_CUE_MVMRCUEoverlapfun", (DL_FUNC) &_MVMR_CUE_MVMRCUEoverlapfun, 6},
    {"_MVMR_CUE_MVMRCUEIndepSample", (DL_FUNC) &_MVMR_CUE_MVMRCUEIndepSample, 5},
    {"_MVMR_CUE_MVMRCUE", (DL_FUNC) &_MVMR_CUE_MVMRCUE, 6},
    {"_MVMR_CUE_rcpparma_hello_world", (DL_FUNC) &_MVMR_CUE_rcpparma_hello_world, 0},
    {"_MVMR_CUE_rcpparma_outerproduct", (DL_FUNC) &_MVMR_CUE_rcpparma_outerproduct, 1},
    {"_MVMR_CUE_rcpparma_innerproduct", (DL_FUNC) &_MVMR_CUE_rcpparma_innerproduct, 1},
    {"_MVMR_CUE_rcpparma_bothproducts", (DL_FUNC) &_MVMR_CUE_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_MVMR_CUE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
